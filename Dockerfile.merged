FROM nvidia/cuda:12.4.1-cudnn-devel-ubuntu22.04

# CosyVoice TTS + Pyannote Audio Speaker Diarization

ARG VENV_NAME="cosyvoice"
ENV VENV=$VENV_NAME
ENV LANG=C.UTF-8 LC_ALL=C.UTF-8

ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
SHELL ["/bin/bash", "--login", "-c"]

RUN apt-get update -y --fix-missing
RUN apt-get install -y \
    python3.11 python3.11-dev python3-pip \
    git build-essential curl wget ffmpeg unzip git git-lfs sox libsox-dev \
    libsndfile1 libsndfile1-dev \
    tmux nano vim htop tree \
    && ln -sf /usr/bin/python3.11 /usr/bin/python \
    && ln -sf /usr/bin/python3.11 /usr/bin/python3 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && git lfs install

# ==================================================================
# conda install and conda forge channel as default
# ------------------------------------------------------------------
# Install miniforge
RUN wget --quiet https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh -O ~/miniforge.sh && \
    /bin/bash ~/miniforge.sh -b -p /opt/conda && \
    rm ~/miniforge.sh && \
    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
    echo "source /opt/conda/etc/profile.d/conda.sh" >> /opt/nvidia/entrypoint.d/100.conda.sh && \
    echo "source /opt/conda/etc/profile.d/conda.sh" >> ~/.bashrc && \
    echo "conda activate ${VENV}" >> /opt/nvidia/entrypoint.d/110.conda_default_env.sh && \
    echo "conda activate ${VENV}" >> $HOME/.bashrc

ENV PATH /opt/conda/bin:$PATH

RUN conda config --add channels conda-forge && \
    conda config --set channel_priority strict
# ------------------------------------------------------------------
# ~conda
# ==================================================================

RUN conda create -y -n ${VENV} python=3.10
ENV CONDA_DEFAULT_ENV=${VENV}
ENV PATH /opt/conda/bin:/opt/conda/envs/${VENV}/bin:$PATH

WORKDIR /workspace

# PYTHONPATH will be updated later to include etl

# Install CosyVoice dependencies (without source code)
RUN conda activate ${VENV} && conda install -y -c conda-forge pynini==2.1.5

# Install core PyTorch
RUN conda activate ${VENV} && \
    pip install --retries 3 --timeout 300 torch==2.3.1 torchaudio==2.3.1 \
    -i https://pypi.org/simple/

# Install CosyVoice requirements manually (key packages)
RUN conda activate ${VENV} && \
    pip install --retries 3 --timeout 300 \
    transformers==4.40.1 lightning==2.2.4 librosa==0.10.2 \
    diffusers==0.29.0 fastapi==0.115.6 gradio==5.4.0 \
    soundfile==0.12.1 matplotlib==3.7.5 omegaconf==2.3.0 \
    -i https://pypi.org/simple/

# ==================================================================
# Add etl dependencies (from requirements.txt)
# ------------------------------------------------------------------
# Copy requirements.txt first
COPY requirements.txt /tmp/requirements.txt

# Install Python dependencies with CUDA 12.4 support (matching original Dockerfile)
RUN conda activate ${VENV} && \
    pip install --retries 3 --timeout 300 \
    torch>=2.0.0 torchaudio>=2.0.0 \
    --index-url https://download.pytorch.org/whl/cu124 && \
    pip install --retries 3 --timeout 300 \
    -i https://pypi.org/simple/ \
    -r /tmp/requirements.txt && \
    rm /tmp/requirements.txt

# Pre-download pyannote model (requires HF token at build time)
ARG HUGGINGFACE_TOKEN
ENV HUGGINGFACE_TOKEN=${HUGGINGFACE_TOKEN}
ENV HF_TOKEN=${HUGGINGFACE_TOKEN}

# Download models as root before switching to louis user
RUN if [ -n "$HUGGINGFACE_TOKEN" ]; then \
    conda activate ${VENV} && \
    python3 -c "from pyannote.audio import Pipeline, Model; Pipeline.from_pretrained('pyannote/speaker-diarization-3.1'); Model.from_pretrained('pyannote/embedding')" && \
    echo "✅ Both diarization and embedding models downloaded successfully"; \
    else \
    echo "⚠️  No HUGGINGFACE_TOKEN provided - models will be downloaded at runtime"; \
    fi

# Create directory for etl project (will be mounted)
RUN mkdir -p /workspace/etl

# Update PYTHONPATH to include etl
ENV PYTHONPATH="${PYTHONPATH}:/workspace/etl:/workspace/etl/src"

# Set environment variables for MKL optimization (from etl)
ENV MKL_SERVICE_FORCE_INTEL=1
ENV MKL_THREADING_LAYER=GNU
ENV OMP_NUM_THREADS=1
ENV MKL_NUM_THREADS=1
ENV MKL_DEBUG_CPU_TYPE=5
ENV KMP_DUPLICATE_LIB_OK=TRUE
ENV KMP_WARNINGS=FALSE
ENV TORCH_WARN=0
ENV PYTORCH_DISABLE_WARNINGS=1

# Create activation script for easier use (as root before switching user)
RUN echo '#!/bin/bash' > /usr/local/bin/activate-env && \
    echo 'source /opt/conda/etc/profile.d/conda.sh' >> /usr/local/bin/activate-env && \
    echo 'conda activate cosyvoice' >> /usr/local/bin/activate-env && \
    echo 'if [ $# -eq 0 ]; then' >> /usr/local/bin/activate-env && \
    echo '    exec sleep infinity' >> /usr/local/bin/activate-env && \
    echo 'else' >> /usr/local/bin/activate-env && \
    echo '    exec "$@"' >> /usr/local/bin/activate-env && \
    echo 'fi' >> /usr/local/bin/activate-env && \
    chmod +x /usr/local/bin/activate-env

# Create memory requirements documentation (merged version needs more memory)
RUN echo "=== 記憶體需求說明 (CosyVoice + Pyannote) ===" > /workspace/MEMORY_REQUIREMENTS.txt && \
    echo "" >> /workspace/MEMORY_REQUIREMENTS.txt && \
    echo "最低需求: 8GB RAM (包含 CosyVoice TTS + Pyannote Audio)" >> /workspace/MEMORY_REQUIREMENTS.txt && \
    echo "建議配置: 12GB RAM + 4GB Swap" >> /workspace/MEMORY_REQUIREMENTS.txt && \
    echo "共享記憶體: 4GB (用於大型 AI 模型)" >> /workspace/MEMORY_REQUIREMENTS.txt && \
    echo "" >> /workspace/MEMORY_REQUIREMENTS.txt && \
    echo "執行指令範例:" >> /workspace/MEMORY_REQUIREMENTS.txt && \
    echo "docker run --shm-size=16g --ulimit memlock=-1 [IMAGE]" >> /workspace/MEMORY_REQUIREMENTS.txt && \
    echo "" >> /workspace/MEMORY_REQUIREMENTS.txt && \
    echo "模型記憶體使用量:" >> /workspace/MEMORY_REQUIREMENTS.txt && \
    echo "- CosyVoice TTS Model: ~2-3GB" >> /workspace/MEMORY_REQUIREMENTS.txt && \
    echo "- Pyannote Segmentation: ~500MB" >> /workspace/MEMORY_REQUIREMENTS.txt && \
    echo "- Pyannote Embedding: ~400MB" >> /workspace/MEMORY_REQUIREMENTS.txt && \
    echo "- Pipeline Overhead: ~1-2GB" >> /workspace/MEMORY_REQUIREMENTS.txt && \
    echo "- Audio Processing: ~500MB" >> /workspace/MEMORY_REQUIREMENTS.txt && \
    echo "- Conda + System: ~1GB" >> /workspace/MEMORY_REQUIREMENTS.txt && \
    echo "" >> /workspace/MEMORY_REQUIREMENTS.txt && \
    echo "注意事項:" >> /workspace/MEMORY_REQUIREMENTS.txt && \
    echo "- 合併版本包含兩套 AI 系統，記憶體需求更高" >> /workspace/MEMORY_REQUIREMENTS.txt && \
    echo "- 如果記憶體不足，程序會被 Killed (OOM Killer)" >> /workspace/MEMORY_REQUIREMENTS.txt && \
    echo "- 建議在有充足 RAM 的機器上運行" >> /workspace/MEMORY_REQUIREMENTS.txt

# Create non-root user for security
RUN useradd -m -u 1000 louis && \
    chown -R louis:louis /workspace
USER louis

# Set default environment variables (reset for user)
ENV HUGGINGFACE_TOKEN=""
ENV HF_TOKEN=""

# Set default working directory to CosyVoice (keeping original behavior)
WORKDIR /workspace/CosyVoice

# Make conda environment default in all shells
RUN echo 'source /opt/conda/etc/profile.d/conda.sh' >> /home/louis/.bashrc && \
    echo 'conda activate cosyvoice' >> /home/louis/.bashrc

# Basic tmux and vim configuration for better UX
RUN echo '# Basic tmux config' > /home/louis/.tmux.conf && \
    echo 'set -g mouse on' >> /home/louis/.tmux.conf && \
    echo 'set -g history-limit 10000' >> /home/louis/.tmux.conf && \
    echo 'set -g default-terminal "screen-256color"' >> /home/louis/.tmux.conf && \
    chown louis:louis /home/louis/.tmux.conf

RUN echo '" Basic vim config' > /home/louis/.vimrc && \
    echo 'syntax on' >> /home/louis/.vimrc && \
    echo 'set number' >> /home/louis/.vimrc && \
    echo 'set autoindent' >> /home/louis/.vimrc && \
    echo 'set tabstop=4' >> /home/louis/.vimrc && \
    echo 'set shiftwidth=4' >> /home/louis/.vimrc && \
    echo 'set expandtab' >> /home/louis/.vimrc && \
    chown louis:louis /home/louis/.vimrc

# Keep container running
CMD ["sleep", "infinity"]
